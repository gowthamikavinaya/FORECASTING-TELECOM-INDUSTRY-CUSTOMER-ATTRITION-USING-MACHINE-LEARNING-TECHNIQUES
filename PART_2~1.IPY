{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "59685416",
   "metadata": {},
   "source": [
    "### Install Required Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "888c67ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: xgboost in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (1.7.4)\n",
      "Requirement already satisfied: scipy in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from xgboost) (1.7.1)\n",
      "Requirement already satisfied: numpy in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from xgboost) (1.20.3)\n",
      "Requirement already satisfied: catboost in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (1.1.1)\n",
      "Requirement already satisfied: scipy in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from catboost) (1.7.1)\n",
      "Requirement already satisfied: six in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from catboost) (1.16.0)\n",
      "Requirement already satisfied: graphviz in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from catboost) (0.20.1)\n",
      "Requirement already satisfied: numpy>=1.16.0 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from catboost) (1.20.3)\n",
      "Requirement already satisfied: pandas>=0.24.0 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from catboost) (1.3.4)\n",
      "Requirement already satisfied: plotly in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from catboost) (5.14.0)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from catboost) (3.4.3)\n",
      "Requirement already satisfied: pytz>=2017.3 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from pandas>=0.24.0->catboost) (2021.3)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from pandas>=0.24.0->catboost) (2.8.2)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from matplotlib->catboost) (0.10.0)\n",
      "Requirement already satisfied: pillow>=6.2.0 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from matplotlib->catboost) (8.4.0)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from matplotlib->catboost) (3.0.4)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from matplotlib->catboost) (1.3.1)\n",
      "Requirement already satisfied: tenacity>=6.2.0 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from plotly->catboost) (8.2.2)\n",
      "Requirement already satisfied: packaging in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from plotly->catboost) (21.0)\n",
      "Requirement already satisfied: imblearn in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (0.0)\n",
      "Requirement already satisfied: imbalanced-learn in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imblearn) (0.10.1)\n",
      "Requirement already satisfied: scipy>=1.3.2 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn->imblearn) (1.7.1)\n",
      "Requirement already satisfied: numpy>=1.17.3 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn->imblearn) (1.20.3)\n",
      "Requirement already satisfied: joblib>=1.1.1 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn->imblearn) (1.2.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn->imblearn) (2.2.0)\n",
      "Requirement already satisfied: scikit-learn>=1.0.2 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn->imblearn) (1.2.2)\n",
      "Requirement already satisfied: imbalanced-learn in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (0.10.1)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn) (2.2.0)\n",
      "Requirement already satisfied: numpy>=1.17.3 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn) (1.20.3)\n",
      "Requirement already satisfied: scikit-learn>=1.0.2 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn) (1.2.2)\n",
      "Requirement already satisfied: joblib>=1.1.1 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn) (1.2.0)\n",
      "Requirement already satisfied: scipy>=1.3.2 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn) (1.7.1)\n",
      "Requirement already satisfied: imblearn==0.0 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (0.0)\n",
      "Requirement already satisfied: imbalanced-learn in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imblearn==0.0) (0.10.1)\n",
      "Requirement already satisfied: numpy>=1.17.3 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn->imblearn==0.0) (1.20.3)\n",
      "Requirement already satisfied: scipy>=1.3.2 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn->imblearn==0.0) (1.7.1)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn->imblearn==0.0) (2.2.0)\n",
      "Requirement already satisfied: joblib>=1.1.1 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn->imblearn==0.0) (1.2.0)\n",
      "Requirement already satisfied: scikit-learn>=1.0.2 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from imbalanced-learn->imblearn==0.0) (1.2.2)\n",
      "Requirement already satisfied: scikit-learn in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (1.2.2)\n",
      "Requirement already satisfied: numpy>=1.17.3 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from scikit-learn) (1.20.3)\n",
      "Requirement already satisfied: scipy>=1.3.2 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from scikit-learn) (1.7.1)\n",
      "Requirement already satisfied: joblib>=1.1.1 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from scikit-learn) (1.2.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from scikit-learn) (2.2.0)\n",
      "Requirement already satisfied: shap in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (0.41.0)\n",
      "Requirement already satisfied: numba in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from shap) (0.54.1)\n",
      "Requirement already satisfied: scipy in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from shap) (1.7.1)\n",
      "Requirement already satisfied: tqdm>4.25.0 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from shap) (4.62.3)\n",
      "Requirement already satisfied: numpy in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from shap) (1.20.3)\n",
      "Requirement already satisfied: slicer==0.0.7 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from shap) (0.0.7)\n",
      "Requirement already satisfied: packaging>20.9 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from shap) (21.0)\n",
      "Requirement already satisfied: scikit-learn in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from shap) (1.2.2)\n",
      "Requirement already satisfied: cloudpickle in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from shap) (2.0.0)\n",
      "Requirement already satisfied: pandas in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from shap) (1.3.4)\n",
      "Requirement already satisfied: pyparsing>=2.0.2 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from packaging>20.9->shap) (3.0.4)\n",
      "Requirement already satisfied: colorama in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from tqdm>4.25.0->shap) (0.4.4)\n",
      "Requirement already satisfied: llvmlite<0.38,>=0.37.0rc1 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from numba->shap) (0.37.0)\n",
      "Requirement already satisfied: setuptools in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from numba->shap) (58.0.4)\n",
      "Requirement already satisfied: pytz>=2017.3 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from pandas->shap) (2021.3)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from pandas->shap) (2.8.2)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from scikit-learn->shap) (2.2.0)\n",
      "Requirement already satisfied: joblib>=1.1.1 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from scikit-learn->shap) (1.2.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\gowthami nagappan\\anaconda\\lib\\site-packages (from python-dateutil>=2.7.3->pandas->shap) (1.16.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install xgboost\n",
    "!pip install catboost\n",
    "!pip install imblearn\n",
    "!pip install -U imbalanced-learn\n",
    "!pip install imblearn==0.0\n",
    "!pip install -U scikit-learn\n",
    "!pip install shap"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "404ba820",
   "metadata": {},
   "source": [
    "## DATA PRE-PROCESSING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "628dd80d",
   "metadata": {},
   "source": [
    "## Import Packages and CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "55235286",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import required packages\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "pd.pandas.set_option(\"display.max_columns\", None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b17101b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(7043, 33)\n"
     ]
    }
   ],
   "source": [
    "# Create Dataframe\n",
    "dataset = pd.read_excel(r'Telco_customer_churn.xlsx', engine='openpyxl') \n",
    "#Print shape of dataset\n",
    "print(dataset.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ea97db89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Count</th>\n",
       "      <th>Country</th>\n",
       "      <th>State</th>\n",
       "      <th>City</th>\n",
       "      <th>Zip Code</th>\n",
       "      <th>Lat Long</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Senior Citizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Tenure Months</th>\n",
       "      <th>Phone Service</th>\n",
       "      <th>Multiple Lines</th>\n",
       "      <th>Internet Service</th>\n",
       "      <th>Online Security</th>\n",
       "      <th>Online Backup</th>\n",
       "      <th>Device Protection</th>\n",
       "      <th>Tech Support</th>\n",
       "      <th>Streaming TV</th>\n",
       "      <th>Streaming Movies</th>\n",
       "      <th>Contract</th>\n",
       "      <th>Paperless Billing</th>\n",
       "      <th>Payment Method</th>\n",
       "      <th>Monthly Charges</th>\n",
       "      <th>Total Charges</th>\n",
       "      <th>Churn Label</th>\n",
       "      <th>Churn Value</th>\n",
       "      <th>Churn Score</th>\n",
       "      <th>CLTV</th>\n",
       "      <th>Churn Reason</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>1</td>\n",
       "      <td>United States</td>\n",
       "      <td>California</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>90003</td>\n",
       "      <td>33.964131, -118.272783</td>\n",
       "      <td>33.964131</td>\n",
       "      <td>-118.272783</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.85</td>\n",
       "      <td>108.15</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>86</td>\n",
       "      <td>3239</td>\n",
       "      <td>Competitor made better offer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>1</td>\n",
       "      <td>United States</td>\n",
       "      <td>California</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>90005</td>\n",
       "      <td>34.059281, -118.30742</td>\n",
       "      <td>34.059281</td>\n",
       "      <td>-118.307420</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.70</td>\n",
       "      <td>151.65</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "      <td>2701</td>\n",
       "      <td>Moved</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9305-CDSKC</td>\n",
       "      <td>1</td>\n",
       "      <td>United States</td>\n",
       "      <td>California</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>90006</td>\n",
       "      <td>34.048013, -118.293953</td>\n",
       "      <td>34.048013</td>\n",
       "      <td>-118.293953</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>8</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>99.65</td>\n",
       "      <td>820.5</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>86</td>\n",
       "      <td>5372</td>\n",
       "      <td>Moved</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7892-POOKP</td>\n",
       "      <td>1</td>\n",
       "      <td>United States</td>\n",
       "      <td>California</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>90010</td>\n",
       "      <td>34.062125, -118.315709</td>\n",
       "      <td>34.062125</td>\n",
       "      <td>-118.315709</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>28</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>104.80</td>\n",
       "      <td>3046.05</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>84</td>\n",
       "      <td>5003</td>\n",
       "      <td>Moved</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0280-XJGEX</td>\n",
       "      <td>1</td>\n",
       "      <td>United States</td>\n",
       "      <td>California</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>90015</td>\n",
       "      <td>34.039224, -118.266293</td>\n",
       "      <td>34.039224</td>\n",
       "      <td>-118.266293</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>49</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>103.70</td>\n",
       "      <td>5036.3</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>5340</td>\n",
       "      <td>Competitor had better devices</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CustomerID  Count        Country       State         City  Zip Code  \\\n",
       "0  3668-QPYBK      1  United States  California  Los Angeles     90003   \n",
       "1  9237-HQITU      1  United States  California  Los Angeles     90005   \n",
       "2  9305-CDSKC      1  United States  California  Los Angeles     90006   \n",
       "3  7892-POOKP      1  United States  California  Los Angeles     90010   \n",
       "4  0280-XJGEX      1  United States  California  Los Angeles     90015   \n",
       "\n",
       "                 Lat Long   Latitude   Longitude  Gender Senior Citizen  \\\n",
       "0  33.964131, -118.272783  33.964131 -118.272783    Male             No   \n",
       "1   34.059281, -118.30742  34.059281 -118.307420  Female             No   \n",
       "2  34.048013, -118.293953  34.048013 -118.293953  Female             No   \n",
       "3  34.062125, -118.315709  34.062125 -118.315709  Female             No   \n",
       "4  34.039224, -118.266293  34.039224 -118.266293    Male             No   \n",
       "\n",
       "  Partner Dependents  Tenure Months Phone Service Multiple Lines  \\\n",
       "0      No         No              2           Yes             No   \n",
       "1      No        Yes              2           Yes             No   \n",
       "2      No        Yes              8           Yes            Yes   \n",
       "3     Yes        Yes             28           Yes            Yes   \n",
       "4      No        Yes             49           Yes            Yes   \n",
       "\n",
       "  Internet Service Online Security Online Backup Device Protection  \\\n",
       "0              DSL             Yes           Yes                No   \n",
       "1      Fiber optic              No            No                No   \n",
       "2      Fiber optic              No            No               Yes   \n",
       "3      Fiber optic              No            No               Yes   \n",
       "4      Fiber optic              No           Yes               Yes   \n",
       "\n",
       "  Tech Support Streaming TV Streaming Movies        Contract  \\\n",
       "0           No           No               No  Month-to-month   \n",
       "1           No           No               No  Month-to-month   \n",
       "2           No          Yes              Yes  Month-to-month   \n",
       "3          Yes          Yes              Yes  Month-to-month   \n",
       "4           No          Yes              Yes  Month-to-month   \n",
       "\n",
       "  Paperless Billing             Payment Method  Monthly Charges Total Charges  \\\n",
       "0               Yes               Mailed check            53.85        108.15   \n",
       "1               Yes           Electronic check            70.70        151.65   \n",
       "2               Yes           Electronic check            99.65         820.5   \n",
       "3               Yes           Electronic check           104.80       3046.05   \n",
       "4               Yes  Bank transfer (automatic)           103.70        5036.3   \n",
       "\n",
       "  Churn Label  Churn Value  Churn Score  CLTV                   Churn Reason  \n",
       "0         Yes            1           86  3239   Competitor made better offer  \n",
       "1         Yes            1           67  2701                          Moved  \n",
       "2         Yes            1           86  5372                          Moved  \n",
       "3         Yes            1           84  5003                          Moved  \n",
       "4         Yes            1           89  5340  Competitor had better devices  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# First 5 rows of the dataset\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "04609824",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    5174\n",
       "1    1869\n",
       "Name: Churn Value, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset[\"Churn Value\"].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e65d0322",
   "metadata": {},
   "source": [
    "## DATA CLEANING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bf40929",
   "metadata": {},
   "source": [
    "#### As per EDA we will change the total charges to numeric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2122b3b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset['Total Charges'] = pd.to_numeric(dataset['Total Charges'], errors='coerce')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b453745f",
   "metadata": {},
   "source": [
    "#### Check Null Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6ce86589",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Charges 0.15618 % in the dataset\n",
      "Churn Reason 73.46301 % in the dataset\n"
     ]
    }
   ],
   "source": [
    "##these are the features with nan value\n",
    "features_with_nan=[column for column in dataset.columns if dataset[column].isnull().sum()>=1]\n",
    "for feature in features_with_nan:\n",
    "    print(feature,np.round(dataset[feature].isnull().mean()*100,5), '% in the dataset')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1ac821a",
   "metadata": {},
   "source": [
    "Missing Values in a DataFrame is called \"NaN\"\n",
    "\n",
    "Why might a value be missing?\n",
    "\n",
    "When considering the potential impact of the missing data on the Dataset, it is essential to consider the underlying reasons for why the data are missing Missing data are of 3 types of categories:\n",
    "\n",
    "Here it is MCAR type missing values in dataset which are Missing completely at Random.\n",
    "\n",
    "When we make this assumption, we are assuming this missing data is fully unrelated to the other information in the data looks like churn reasons were not given by the customers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8035f633",
   "metadata": {},
   "source": [
    "## Other Data Cleaning steps"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c6cc6b6",
   "metadata": {},
   "source": [
    "### Handling Duplicates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "aa07e548",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking for duplicates\n",
    "dataset.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28b5332c",
   "metadata": {},
   "source": [
    "### Remove ID from the dataset as it cannot used in Model Training\n",
    "\n",
    "### As a Report form the EDA we can drop some features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c540382c",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset.drop(['CustomerID','Zip Code','Count', 'Country' , 'State' , 'Lat Long','Latitude','Longitude' ,'Gender', 'Churn Label' , 'Phone Service' ,'CLTV' ,'Churn Reason'], inplace=True, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec752dcb",
   "metadata": {},
   "source": [
    "## FEATURE ENGINEERING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1867b5c",
   "metadata": {},
   "source": [
    "### Type of Features\n",
    "### Numeric Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "62fb3226",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num of Numerical Features in the Dataset : 5\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['Tenure Months',\n",
       " 'Monthly Charges',\n",
       " 'Total Charges',\n",
       " 'Churn Value',\n",
       " 'Churn Score']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Telco_numeric_features = [colu for colu in dataset.columns if dataset[colu].dtype != 'O']\n",
    "print('Num of Numerical Features in the Dataset :', len(Telco_numeric_features))\n",
    "Telco_numeric_features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf003f5f",
   "metadata": {},
   "source": [
    "### Categorical Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3b400168",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num of Categorical Features : 15\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['City',\n",
       " 'Senior Citizen',\n",
       " 'Partner',\n",
       " 'Dependents',\n",
       " 'Multiple Lines',\n",
       " 'Internet Service',\n",
       " 'Online Security',\n",
       " 'Online Backup',\n",
       " 'Device Protection',\n",
       " 'Tech Support',\n",
       " 'Streaming TV',\n",
       " 'Streaming Movies',\n",
       " 'Contract',\n",
       " 'Paperless Billing',\n",
       " 'Payment Method']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categorical_feature = [column for column in dataset.columns if dataset[column].dtype == 'O']\n",
    "print('Num of Categorical Features :', len(categorical_feature))\n",
    "categorical_feature"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f79cd7f",
   "metadata": {},
   "source": [
    "### Discrete Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2bb08d7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num of Discrete Features : 1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['Churn Value']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "discrete_features=[column for column in Telco_numeric_features if (len(dataset[column].unique())<=25)]\n",
    "print('Num of Discrete Features :',len(discrete_features))\n",
    "discrete_features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00718f16",
   "metadata": {},
   "source": [
    "### Continuous features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f12475ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num of Continuous Features : 4\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['Tenure Months', 'Monthly Charges', 'Total Charges', 'Churn Score']"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "continuous_features=[column for column in Telco_numeric_features if len(dataset[column].unique()) > 25]\n",
    "print('Num of Continuous Features :',len(continuous_features))\n",
    "continuous_features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "baec27dc",
   "metadata": {},
   "source": [
    "## Multicollinearity Check"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "849f5cb5",
   "metadata": {},
   "source": [
    "Multicollinearity can be a concern in logistic regression as it can lead to instability in the estimation of the model parameters and affect the interpretation of the coefficients.\n",
    "\n",
    "Multicollinearity arises if there is high correlation between 2 (or) more independent variables in logistic regression model. This can lead to difficulties in interpreting the effect of individua variables on the outcome variables because their effects may become indistinguishable. Additionally, it can lead to inflated standard errors and unstable estimates of the model coefficients.\n",
    "\n",
    "There are several methods for detecting multicollinearity including the Variance Inflation Factor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "92e7d9db",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "def vif_calculations(selected_features, dataset):\n",
    "    \n",
    "    X = dataset[selected_features]\n",
    "\n",
    "    X['intercept'] = 1\n",
    "    \n",
    "    # Generate dataframe to keep VIF values\n",
    "    vifvalues = pd.DataFrame()\n",
    "    vifvalues[\"Variable\"] = X.columns\n",
    "    vifvalues[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n",
    "    vifvalues = vifvalues[vifvalues['Variable']!='intercept']\n",
    "    return vifvalues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "20e6f872",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create copy of dataframe to check variance inflation factor\n",
    "dfcopy = dataset.copy()\n",
    "for i in continuous_features:\n",
    "    dfcopy[i].fillna(dfcopy[i].median(), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e8d35c50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variable</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Tenure Months</td>\n",
       "      <td>5.777478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Monthly Charges</td>\n",
       "      <td>3.308527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total Charges</td>\n",
       "      <td>9.472717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Churn Score</td>\n",
       "      <td>1.106730</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Variable       VIF\n",
       "0    Tenure Months  5.777478\n",
       "1  Monthly Charges  3.308527\n",
       "2    Total Charges  9.472717\n",
       "3      Churn Score  1.106730"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vif_calculations(continuous_features, dfcopy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a5f7175",
   "metadata": {},
   "source": [
    "The VIF (variance inflation factor) establishes how strongly the independent variables are correlated. By regressing a variable against every other variable, it is predicted. \n",
    "\n",
    "A commonly used rule of is that a VIF value greater than 5 or 10 means a problematic degree of multicollinearity. \n",
    "\n",
    "This Dataset has Multicollinearity mostly monthly charges and Total charges have more chance of being highly correlated"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5dfd2f3",
   "metadata": {},
   "source": [
    "### lets drop anyone of them and check again"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "46d051a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfcopy.drop('Monthly Charges', inplace=True, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "628f4403",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variable</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Tenure Months</td>\n",
       "      <td>3.296786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Total Charges</td>\n",
       "      <td>3.178741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Churn Score</td>\n",
       "      <td>1.066775</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Variable       VIF\n",
       "0  Tenure Months  3.296786\n",
       "1  Total Charges  3.178741\n",
       "2    Churn Score  1.066775"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "continuous_columns = continuous_features.remove('Monthly Charges')\n",
    "vif_calculations(continuous_features, dfcopy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30afd8f5",
   "metadata": {},
   "source": [
    "Now this dataset doesn’t have any Multicollinearity so let’s remove “Monthly Charges” Column as it might be using Logistic Regression Model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bc8b1cbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset.drop('Monthly Charges', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5de27909",
   "metadata": {},
   "source": [
    "### Check Outlier and Capping it"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb40c083",
   "metadata": {},
   "source": [
    "#### Why outliers?\n",
    "\n",
    "Data Entry error : Human error.\n",
    "\n",
    "Measurement error: Instrument error.\n",
    "\n",
    "Natural error: it will be Real life data.\n",
    "\n",
    "Intentional error: People give wrong inputs\n",
    "\n",
    "    \n",
    "#### Impact of Outliers ?\n",
    "\n",
    "Ouliers can very high impact on few Machine learning models.\n",
    "\n",
    "Can Cause bias in the output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "607a7f28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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ssUT8UY+/vGP59prrx38fMSIEXnqqadyzjnnJEnOPffcPPzww3niiSdy9tln55hjjsm4cePyrne9K08//fQB633uuefmkUceacl5cKDly5fnoosuygknnJAk1nSY27hxY6ZNm5Yrr7wy8+fPz0c/+lFrOsy9+93vzr59+7J///709/eno6PDmr5FQyJ++vv7M3bs2MHPR4wYkVdeeaWFE/FGjj322IwdOzb9/f255pprct1116VpmrS1tQ3e/sILL6S/vz/jxo074Ov6+/sP2P6vfWmt9evXZ8KECYM/GJNY02Fu586defLJJ7NixYp8+9vfzsKFC63pMDdmzJj09vbmwgsvzLJly3LppZda07doSLzmZ+zYsdm9e/fg5/v3709Hx5AYjYPYunVrrrzyynzuc5/Lpz71qdx+++2Dt+3evTvjx49/zbru3r0748aNO2D7v/alte655560tbXlkUceyZ/+9KcsXrw4fX19g7db0+Hn7W9/e7q6unLMMcekq6sro0aNyt/+9rfB263p8HPXXXflwx/+cL72ta9l69atueyyyzIwMDB4uzX9/zckrvzMnDkzDz30UJLk8ccfz7Rp01o8EW/kH//4R770pS9l0aJF+cxnPpMkee9735tNmzYlSR566KG8733vy/Tp07N58+bs3bs3L7zwQp577rlMmzYtM2fOzK9//evBfWfNmtWyc+FVd999d37yk59k9erVec973pPly5fn3HPPtabD2KxZs/Kb3/wmTdPk73//e/bs2ZMPfvCD1nQYGz9+/OCVm+OOOy6vvPKKn71v0ZD4Oz//+m2vZ599Nk3T5Oabb86UKVNaPRYH0d3dnfvvvz9dXV2D277+9a+nu7s7AwMD6erqSnd3d0aMGJF169Zl7dq1aZoml19+eWbPnp09e/Zk8eLF2b59e0aOHJnvfe97ecc73tHCM+LfXXrppbnhhhvS3t6eZcuWWdNh7LbbbsumTZvSNE2uv/76TJ482ZoOY7t3787SpUuzffv2DAwM5POf/3zOPPNMa/oWDIn4AQA4UobE014AAEeK+AEAShE/AEAp4gcAKEX8AACl+EuCQJLk1ltvzVNPPZXt27fnpZdeyimnnJLOzs6sXLnyNfs+88wz2bVrV97//ve/7rE2bdqUNWvW5I477jhg+9atW3Prrbemr68vL730Us4444wsXbo027Zty1e/+tWsW7fusJwbwL8TP0CSZMmSJUlefauL559/PgsXLjzovg888ECOP/74g8bP69m3b18WLFiQG264IWeddVaSV/9m1MqVK3PRRRf9Z8MDvAniBziogYGBLF26NFu2bMm+ffvyxS9+MbNmzcrPf/7zjBw5MmeccUb++te/5u677x78mhUrVrzusTZv3pyTTjppMHySZNGiRdm/f3927NiRvr6+LFiwINu3b8/pp5+e7u7uPPvss7n11luzf//+7Nq1K9/4xjcyc+bMnH/++enq6kpXV1cuueSSLFmyJB0dHZk0aVJ6e3uzevXq3H///bnrrrvS3t6eWbNmZeHChdm8eXOWL1+ejo6OjB8/Pt/97ncPeF9BoAbxAxzU2rVr09nZmdtvvz39/f2ZO3du1qxZkzlz5uT444/P9OnT8/DDD+fHP/5xRo8enW9+85vZuHFjTjzxxNcca9u2bTnllFMO2DZq1KjBj/v7+3PLLbdk3LhxueCCC7Jjx4709PRk8eLFOf3003Pvvfdm/fr1mTlzZrZu3Zr169ens7Nz8F3LzzvvvKxbty69vb355z//mTvvvDP33HNPRo8enUWLFuW3v/1tNm7cmAsuuCBf/vKX8+CDD2bXrl3iBwoSP8BBPffcc/nQhz6U5NU3IJ4yZUq2bNlywD4TJ07M4sWLc+yxx+b555/PjBkzXvdY73znO/PAAw8csG3nzp15/PHHc9ppp+WUU07JcccdN3jMPXv25IQTTsgPfvCDvO1tb8vu3bsHQ6WzszOdnZ2DM5599tlJXn0/q3vvvTd//vOf09fXl6985StJXn1bgC1btmT+/Pn54Q9/mMsuuywnnnhipk+ffmj+oYBhxW97AQc1ZcqU/P73v0/y6pWZZ599NpMnT05bW1v279+fF154IStXrswdd9yR7u7ujBo1Kgd7x5wZM2bkL3/5S5544okkSdM0+f73v5/f/e53SZK2trbXfM13vvOdXHPNNVm+fHmmTZs2eOz29v/90TVt2rQ89thjSZI//vGPSZLJkyfn5JNPzqpVq7J69epccsklOeuss3Lvvfdmzpw5Wb16dU477TQvsIaiXPkBDuqzn/1sli1blosvvjh79+7NVVddlYkTJ+bMM8/MbbfdlilTpmTmzJmZM2dOxowZk/Hjx2fbtm2ZPHnya47V3t6eFStW5MYbb8yePXvy4osvZsaMGbnuuuuybdu21/3+n/70p7NgwYJMnDgxJ510Unbu3PmafRYuXJilS5dm1apVGTduXDo6OjJhwoR84QtfyKWXXpp9+/Zl0qRJufDCC/Pyyy9nyZIlGTNmTEaOHJkbb7zxkP+bAUOfNzYFhrVf/OIXOeuss3Lqqafmpz/9af7whz/klltuafVYwBDmyg8wrJ188sm5/vrrM3r06LS3t+fmm29u9UjAEOfKDwBQihc8AwCliB8AoBTxAwCUIn4AgFLEDwBQivgBAEr5H7n3iPv5Hmf2AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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TZs2Tfz5ePv5wx/+kHe9613p6urKzJkzc8opp2THjh2TPpv4mcKmT5+eGTNmZHR0NF/60pdy+eWXp9FopK2tbeL2559/vslTsm3btnR3d+cDH/jAxDF7ak179+7No48+mo0bN2bNmjX5yle+Ylctatq0aRkeHs6HP/zhrFq1KpdeeqldtZjFixens/N/rq453n5GR0czc+bMiftMnz49o6Ojkz6ba36muGeeeSbLli3LJZdcko985CO58cYbJ24bGxvLSSed1MTpSJI777wzbW1t+c1vfpPHH388V199dUZGRiZut6fWMWvWrCxYsCBdXV1ZsGBBTjzxxDz77LMTt9tV67j11lvz/ve/P1/+8pfzzDPP5NOf/nTGx8cnbrer1nPk9Vf/3s+MGTMyNjZ21PEjY2jSZpn0MzBpdu/enc9+9rO56qqr8vGPfzxJ8s53vjPbt29Pktx33315z3ve08wRSfLjH/84t912WwYGBnLWWWdlw4YN6enpsacW9O53vzv3339/Go1Gnnvuuezfvz/nn3++XbWgk046aeJJ8k1velNeeOEFj38t7nj7Oeecc/LQQw/lwIEDef7557Nz586cccYZkz6Lz/mZwtauXZuf/exnWbBgwcSxr33ta1m7dm3Gx8ezYMGCrF27Nh0dHU2ckiNdeumlWb16ddrb27Nq1Sp7akHf+MY3sn379jQajVxxxRU5+eST7aoFjY2NZcWKFdm1a1fGx8dz2WWX5eyzz7arFvOPf/wjV155ZbZu3ZqnnnrquPvZunVrtmzZkkajkS984QtZvHjxpM8lfgCAUrztBQCUIn4AgFLEDwBQivgBAEoRPwBAKT7kEDiuJ554IjfeeGP279+fffv25YILLkhfX18efPDBDA4O5tvf/vaknPcHP/hBHnjggbS3t6etrS1XXHFFzj777Ek5F1CT+AGO8a9//StXXnllNm3alFNPPTWHDh3K8uXLMzg4eNTnSr3ahoaGcu+992bz5s1pa2ub+ETsu+66a9LOCdTjc36AY/zkJz/JY489lpUrV04cGxsbywknnJCHH344GzZsSHd3d0ZGRrJo0aL09fVNfIDjaaedls2bN2f37t352Mc+lqVLl2bWrFnp6enJfffdlzPPPDNPPPFERkdHs3HjxsybN2/iHCMjI/noRz+avr6+9PT0ZO7cuTl48GC6urryyCOP5Prrr0+j0cjcuXNz00035cknn0x/f386Ojpy4oknpr+/Py+++OJR5+zp6cnatWuTHP76ihtuuOE1+fh8oHW55gc4xj//+c+84x3vOOrY9OnT09XVlSQ5cOBAvvvd7058dcf/ZdeuXbnlllvyuc99Lklyzjnn5NZbb8373ve+/PSnPz3qvt3d3fne976X3/3ud1myZEkuvPDC/PKXv0ySrFq1KuvWrcsdd9yR888/Pzt37szKlStz7bXX5rbbbsvFF1+c9evXH3POVatW5brrrsvAwEB6enrywx/+8FX5HQFTl7e9gGO8/e1vz5/+9Kejjv3973+f+JLP008/fSKEjvzW5n878gXlk08+eeK+yeHv90mSt771rdm9e/dRP/f0009nxowZWbduXZLkj3/8Yz7/+c/nvPPOy549e3LaaaclST71qU8lORxpZ511VpLkve99b775zW8ec86dO3dmzZo1SZLx8fHMnz//Zf8+gNcXr/wAx1i0aFHuv//+/O1vf0tyOBrWr1+fv/zlL0mStra2Y36mq6sru3btSpKjwunIb3L+T/785z9n9erVOXDgQJJk/vz5mTlzZjo6OjJnzpz89a9/TXL4ouif//znmTNnTnbs2JEk+e1vf5tTTz31mHPOnz8/GzZsyMDAQK666qpccMEFL3ke4PXJKz/AMWbMmJH169dn5cqVaTQaGRsby6JFi3LJJZfkwQcfPO7PXHbZZfn617+et73tbZkzZ84rOu+HPvSh7Ny5M5/4xCcybdq0NBqNfPWrX83MmTOzZs2arFixIu3t7XnLW96Sz3zmM5k3b176+/vTaDTS0dGRG2644Zj/5urVq3P11Vfn0KFDSZLrr7/+Fc0GvH644BkAKMXbXgBAKeIHAChF/AAApYgfAKAU8QMAlCJ+AIBSxA8AUIr4AQBK+W8eKtkX8CFIPwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in continuous_features:\n",
    "        plt.figure(figsize=(10,6))\n",
    "        sns.set_style('ticks')\n",
    "        ax = sns.boxplot(dataset[i])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d322137",
   "metadata": {},
   "source": [
    "No outliers in the dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e5f0320",
   "metadata": {},
   "source": [
    "## FEATURE TRANSFORMATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "be5d7d66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Tenure Months    0.239540\n",
       "Total Charges    0.961642\n",
       "Churn Score     -0.089840\n",
       "dtype: float64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset[continuous_features].skew(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "901bdb8f",
   "metadata": {},
   "source": [
    "There is no specific threshold for skewness that is universally accepted as a definitive indication of whether a distribution is significantly skewed or not. However, some general guidelines are often used to interpret the magnitude of the skewness value.\n",
    "\n",
    "Typically, a distribution is seen to be considerably skewed if its skewness value is larger than +1 or less than -1. Moderate skewness is defined as a skewness value among +0.5 and +1 or between -0.5 and -1. Last but not least, skewness values among -0.5 and +0.5 are regarded as symmetric roughly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "573edf32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# distribution of data before scaling\n",
    "plt.figure(figsize=(12, 6))\n",
    "for i, col in enumerate(continuous_features):\n",
    "    plt.subplot(2, 3, i+1)\n",
    "    sns.kdeplot(x=dataset[col], color='indianred')\n",
    "    plt.xlabel(col)\n",
    "    plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aca18db4",
   "metadata": {},
   "source": [
    "Total Charges is skewed so we can apply Power Transformer to make it normally distributed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36b0d6a7",
   "metadata": {},
   "source": [
    "## SPLIT X and Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "10f8e7b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X = dataset.drop(['Churn Value'], axis=1)\n",
    "y = dataset['Churn Value']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ba08fba",
   "metadata": {},
   "source": [
    "Divide the Data frame into X and Y.\n",
    "\n",
    "Here, the independent Columns are set as Variable X and the Dependent Column (Churn Value) is set as Variable Y.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a1b164da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "City : 1129\n",
      "Senior Citizen : 2\n",
      "Partner : 2\n",
      "Dependents : 2\n",
      "Multiple Lines : 3\n",
      "Internet Service : 3\n",
      "Online Security : 3\n",
      "Online Backup : 3\n",
      "Device Protection : 3\n",
      "Tech Support : 3\n",
      "Streaming TV : 3\n",
      "Streaming Movies : 3\n",
      "Contract : 3\n",
      "Paperless Billing : 2\n",
      "Payment Method : 4\n"
     ]
    }
   ],
   "source": [
    "for feature in categorical_feature:\n",
    "    print(feature,':', X[feature].nunique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d4241a0",
   "metadata": {},
   "source": [
    "## FEATURE ENCODING AND SCALING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f6dd3c2",
   "metadata": {},
   "source": [
    "#### One Hot Encoding for Columns which had lesser unique values and not ordinal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ee59c8be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tenure Months: mean = 32.37, median = 29.00\n",
      "Total Charges: mean = 2283.30, median = 1397.47\n",
      "Churn Score: mean = 58.70, median = 61.00\n"
     ]
    }
   ],
   "source": [
    "for i in continuous_features:\n",
    "    print(f'{i}: mean = {dataset[i].mean():.2f}, median = {dataset[i].median():.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e9a77d6",
   "metadata": {},
   "source": [
    "**Mean imputer:** Since we handeled outlier for the continuous features the mean and median of the features are nearly same. When there are no outliers mean performs a better imputer.\n",
    "\n",
    "**Standardscaler:** As the features distribution are nearly normal we use standard scaler.\n",
    "\n",
    "**Power Transformer:** Since Total Charges are skewed we use Power Transformer on them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "74a63a64",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Column Transformer using 3 type of transformers\n",
    "categorical_feature = X.select_dtypes(include=\"object\").columns\n",
    "num_feature = Telco_numeric_features.copy()\n",
    "num_feature.remove('Churn Value')\n",
    "num_feature.remove('Monthly Charges')\n",
    "num_feature.remove('Total Charges')\n",
    "\n",
    "transform_features=['Total Charges']\n",
    "\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler, PowerTransformer\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "\n",
    "transform_pipe = Pipeline(steps=[\n",
    "    ('transformer', PowerTransformer()),\n",
    "    ('imputer', SimpleImputer(strategy='mean')),\n",
    "    ('scaler', StandardScaler(with_mean=False))\n",
    "])\n",
    "\n",
    "preprocessor = ColumnTransformer(\n",
    "    [\n",
    "        (\"numeric_Pipeline\",StandardScaler(),num_feature),\n",
    "        (\"Categorical_Pipeline\",OneHotEncoder(), categorical_feature),\n",
    "        (\"Power_Transformation\", transform_pipe, transform_features)\n",
    "]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a545a4a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Tenure Months', 'Churn Score']"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "bb9488ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "X= preprocessor.fit_transform(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ea663d6",
   "metadata": {},
   "source": [
    "## HANDLING IMBALANCED DATASET"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8644fabd",
   "metadata": {},
   "source": [
    "Dealing with an unbalanced target variable. \n",
    "\n",
    "SMOTE, also known as synthetic minority oversampling technique, is another approach to oversampling the minority class. There are many situations when adding duplicate minority class entries to the model does not result in the addition of additional data. \n",
    "\n",
    "Class imbalance is effectively addressed using the well-known oversampling strategy known as SMOTE. The purpose of integrating SMOTE with other undersampling algorithms (ENN, Tomek) is to increase the efficiency of managing the unbalanced class."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e71eb0f",
   "metadata": {},
   "source": [
    "### Why Smote tomek? "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f0fae56",
   "metadata": {},
   "source": [
    "A hybrid method called SMOTE-Tomek tries to remove overlapping data points for each classes scattered in sample space. This approach employs Tomek Links to eliminate overlapping observations of the two classes and combines the SMOTE capability to produce synthetic data to the minority class.\n",
    "\n",
    "To add new data of minority class:\n",
    "1) Pick random information from the minority class.\n",
    "2) Determine the separation between randomly generated data & its k closest neighbours. \n",
    "3) As a synthetic sample, combine the difference with a random numb between 0 & 1, then its will adds the results to minority class. \n",
    "4) Keep going back to steps 2-3 until the necessary percentage(%) of the minority class reach.\n",
    "\n",
    "To remove the overlapping data points of both classes:\n",
    "1) In the dataset, look for Tomek Links—pairs of samples that are closest neighbours but belong to distinct classes. 2) Remove the sample from each Tomek Link that belongs to the dominant class. 3) Repeat step 1–2 until there are no more Tomek Links in the dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52bebc95",
   "metadata": {},
   "source": [
    "## MODEL SELECTION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d06f7204",
   "metadata": {},
   "source": [
    "Here should understand the Various Classification models with default values from these models we can choose top 4 with Highest Accuracy score and proceed with HyperParameter Tuning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae528a53",
   "metadata": {},
   "source": [
    "## TRAIN & TEST SPLIT"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1278d9d2",
   "metadata": {},
   "source": [
    "The Train and Test split technique are using to Train the Models with dataset then we can evaluate the ML models performance with Test Data.  \n",
    "\n",
    "Here we can split the dataset into 80-20 Combination. 80 % of Data from dataset to Train the model & 20% Data from the dataset to Test."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08ddee34",
   "metadata": {},
   "source": [
    "### Import Required packages for model training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a6c4471b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report, ConfusionMatrixDisplay, \\\n",
    "                            precision_score, recall_score, f1_score, roc_auc_score, roc_curve \n",
    "from sklearn.svm import SVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from catboost import CatBoostClassifier\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2baf7073",
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate_clf(true, predicted):\n",
    "    acc = accuracy_score(true, predicted) # Calculate Accuracy\n",
    "    f1 = f1_score(true, predicted) # Calculate F1-score\n",
    "    precision = precision_score(true, predicted) # Calculate Precision\n",
    "    recall = recall_score(true, predicted)  # Calculate Recall\n",
    "    roc_auc = roc_auc_score(true, predicted) #Calculate Roc\n",
    "    return acc, f1 , precision, recall, roc_auc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "3e0c778e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "seed_value = 1234\n",
    "random.seed(seed_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4362448a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize models which are required for models\n",
    "models = {\n",
    "    \"Logistic Regression\": LogisticRegression(),\n",
    "    \"Gradient Boosting\": GradientBoostingClassifier(),\n",
    "    \"CatBoosting Classifier\": CatBoostClassifier(verbose=False),\n",
    "    \"Random Forest\": RandomForestClassifier(),\n",
    "    \"Decision Tree\": DecisionTreeClassifier(),\n",
    "    \"K-Neighbors Classifier\": KNeighborsClassifier(),\n",
    "    \"XGBClassifier\": XGBClassifier(), \n",
    "    \"AdaBoost Classifier\": AdaBoostClassifier()\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6849c447",
   "metadata": {},
   "source": [
    "### **Why it is not really a good idea to perform upsampling (For e.g, using SMOTE) before the train-test split in the context of imbalanced classification problems.** \n",
    "\n",
    "This approach can lead to two problems:\n",
    "\n",
    "- **Data leakage:** When upsampling is conducted prior to the train-test split, some of the duplicated or synthetic samples generated may end up in both the training & test sets, which means that the model is being evaluated on some samples that it has already seen during training. This violates the fundamental requirement of having a test set that is independent of the training dataset and can lead to over-optimistic performance estimates.\n",
    "\n",
    "- **Biased performance measures:** Upsampling before the train-test split can also lead to artificially balanced test sets, which can result in misleading performance estimates. The goal of the test set is to obtain performance estimates that are representative of the real, unseen data, which is imbalanced in this case. By artificially balancing the test set, The estimated performance may not accurately reflect the model's capacity to generalise to previously unknown data.\n",
    "\n",
    "Although SMOTE generates synthetic samples Which are \"close\" to real minority classes. The issues outlined above still apply to some extent. To avoid these problems, we are using a pipeline approach where SMOTE is applied only to the training set after the train-test split."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c793bc88",
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.combine import SMOTETomek\n",
    "\n",
    "def evaluate_models(X, y, models):\n",
    "    X_trains, X_tests, y_trains, y_tests = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    \n",
    "    # Applying SMOTE Tomek to the training set only\n",
    "    smt = SMOTETomek(random_state=42,sampling_strategy='minority')\n",
    "    X_trains, y_trains = smt.fit_resample(X_trains, y_trains)\n",
    "    \n",
    "    models_list = []\n",
    "    accu_list = []\n",
    "    f1_list = []\n",
    "    preci_list = []\n",
    "    recall_list = []\n",
    "    rocauc_list = []\n",
    "    execution_time = []\n",
    "    \n",
    "    for name, model in models.items():\n",
    "        start_time = time.time() # Start the timer\n",
    "        model.fit(X_trains, y_trains) # Train model\n",
    "        end_time = time.time() # End the timer\n",
    "\n",
    "        # Make the predictions\n",
    "        y_train_preds = model.predict(X_trains)\n",
    "        y_test_preds = model.predict(X_tests)\n",
    "\n",
    "        # Trainingset performance\n",
    "        train_accuracys, trains_f1, train_precisions, train_recalls, train_rocaucs = evaluate_clf(y_trains, y_train_preds)\n",
    "\n",
    "        # Testset performance\n",
    "        test_accuracys, tests_f1, test_precisions, test_recalls, test_rocaucs = evaluate_clf(y_tests, y_test_preds)\n",
    "\n",
    "        print(\"Model :\" ,name)\n",
    "\n",
    "        print('Performance of the Model')\n",
    "        print(\"TrainSet - Accuracy: {:.4f}\".format(train_accuracys))\n",
    "        print('TrainSet - F1 score: {:.4f}'.format(trains_f1)) \n",
    "        print('TrainSet - Precision: {:.4f}'.format(train_precisions))\n",
    "        print('TrainSet - Recall: {:.4f}'.format(train_recalls))\n",
    "        print('TrainSet - Roc Auc Score: {:.4f}'.format(train_rocaucs))\n",
    "\n",
    "        print('----------------------------------')\n",
    "\n",
    "        print('Performance of the Model')\n",
    "        print('TestSet - Accuracy: {:.4f}'.format(test_accuracys))\n",
    "        print('TestSet - F1 score: {:.4f}'.format(tests_f1))\n",
    "        print('TestSet - Precision: {:.4f}'.format(test_precisions))\n",
    "        print('TestSet - Recall: {:.4f}'.format(test_recalls))\n",
    "        print('TestSet - Roc Auc Score: {:.4f}'.format(test_rocaucs))\n",
    "        print('='*35)\n",
    "        print('\\n')\n",
    "        # Append evaluation metrics to lists\n",
    "        models_list.append(name)\n",
    "        accu_list.append(test_accuracys)\n",
    "        f1_list.append(tests_f1)\n",
    "        preci_list.append(test_precisions)\n",
    "        recall_list.append(test_recalls)\n",
    "        rocauc_list.append(test_rocaucs)\n",
    "        execution_time.append(end_time - start_time) # Append the execution time to the list\n",
    "    \n",
    "    # Create and return a dataframe with evaluation results\n",
    "    report = pd.DataFrame({\n",
    "        'Model Name': models_list,\n",
    "        'Accuracy': accu_list,\n",
    "        'F1 Score': f1_list,\n",
    "        'Precision': preci_list,\n",
    "        'Recall': recall_list,\n",
    "        'ROC AUC Score': rocauc_list,\n",
    "        'Execution Time': execution_time\n",
    "    }).sort_values(by=['Accuracy'], ascending=False).reset_index(drop=True)\n",
    "        \n",
    "    return report"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc38dcd7",
   "metadata": {},
   "source": [
    "## EVALUATE ALL BASE MODELS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "10eb9c7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model : Logistic Regression\n",
      "Performance of the Model\n",
      "TrainSet - Accuracy: 0.9504\n",
      "TrainSet - F1 score: 0.9511\n",
      "TrainSet - Precision: 0.9383\n",
      "TrainSet - Recall: 0.9643\n",
      "TrainSet - Roc Auc Score: 0.9504\n",
      "----------------------------------\n",
      "Performance of the Model\n",
      "TestSet - Accuracy: 0.9070\n",
      "TestSet - F1 score: 0.8471\n",
      "TestSet - Precision: 0.7943\n",
      "TestSet - Recall: 0.9075\n",
      "TestSet - Roc Auc Score: 0.9072\n",
      "===================================\n",
      "\n",
      "\n",
      "Model : Gradient Boosting\n",
      "Performance of the Model\n",
      "TrainSet - Accuracy: 0.9555\n",
      "TrainSet - F1 score: 0.9563\n",
      "TrainSet - Precision: 0.9399\n",
      "TrainSet - Recall: 0.9732\n",
      "TrainSet - Roc Auc Score: 0.9555\n",
      "----------------------------------\n",
      "Performance of the Model\n",
      "TestSet - Accuracy: 0.9134\n",
      "TestSet - F1 score: 0.8565\n",
      "TestSet - Precision: 0.8089\n",
      "TestSet - Recall: 0.9100\n",
      "TestSet - Roc Auc Score: 0.9124\n",
      "===================================\n",
      "\n",
      "\n",
      "Model : CatBoosting Classifier\n",
      "Performance of the Model\n",
      "TrainSet - Accuracy: 0.9702\n",
      "TrainSet - F1 score: 0.9706\n",
      "TrainSet - Precision: 0.9575\n",
      "TrainSet - Recall: 0.9841\n",
      "TrainSet - Roc Auc Score: 0.9702\n",
      "----------------------------------\n",
      "Performance of the Model\n",
      "TestSet - Accuracy: 0.9141\n",
      "TestSet - F1 score: 0.8551\n",
      "TestSet - Precision: 0.8207\n",
      "TestSet - Recall: 0.8925\n",
      "TestSet - Roc Auc Score: 0.9076\n",
      "===================================\n",
      "\n",
      "\n",
      "Model : Random Forest\n",
      "Performance of the Model\n",
      "TrainSet - Accuracy: 1.0000\n",
      "TrainSet - F1 score: 1.0000\n",
      "TrainSet - Precision: 1.0000\n",
      "TrainSet - Recall: 1.0000\n",
      "TrainSet - Roc Auc Score: 1.0000\n",
      "----------------------------------\n",
      "Performance of the Model\n",
      "TestSet - Accuracy: 0.9006\n",
      "TestSet - F1 score: 0.8201\n",
      "TestSet - Precision: 0.8439\n",
      "TestSet - Recall: 0.7975\n",
      "TestSet - Roc Auc Score: 0.8695\n",
      "===================================\n",
      "\n",
      "\n",
      "Model : Decision Tree\n",
      "Performance of the Model\n",
      "TrainSet - Accuracy: 1.0000\n",
      "TrainSet - F1 score: 1.0000\n",
      "TrainSet - Precision: 1.0000\n",
      "TrainSet - Recall: 1.0000\n",
      "TrainSet - Roc Auc Score: 1.0000\n",
      "----------------------------------\n",
      "Performance of the Model\n",
      "TestSet - Accuracy: 0.9077\n",
      "TestSet - F1 score: 0.8403\n",
      "TestSet - Precision: 0.8261\n",
      "TestSet - Recall: 0.8550\n",
      "TestSet - Roc Auc Score: 0.8918\n",
      "===================================\n",
      "\n",
      "\n",
      "Model : K-Neighbors Classifier\n",
      "Performance of the Model\n",
      "TrainSet - Accuracy: 0.9220\n",
      "TrainSet - F1 score: 0.9274\n",
      "TrainSet - Precision: 0.8676\n",
      "TrainSet - Recall: 0.9959\n",
      "TrainSet - Roc Auc Score: 0.9220\n",
      "----------------------------------\n",
      "Performance of the Model\n",
      "TestSet - Accuracy: 0.8325\n",
      "TestSet - F1 score: 0.7602\n",
      "TestSet - Precision: 0.6404\n",
      "TestSet - Recall: 0.9350\n",
      "TestSet - Roc Auc Score: 0.8634\n",
      "===================================\n",
      "\n",
      "\n",
      "Model : XGBClassifier\n",
      "Performance of the Model\n",
      "TrainSet - Accuracy: 0.9925\n",
      "TrainSet - F1 score: 0.9925\n",
      "TrainSet - Precision: 0.9899\n",
      "TrainSet - Recall: 0.9952\n",
      "TrainSet - Roc Auc Score: 0.9925\n",
      "----------------------------------\n",
      "Performance of the Model\n",
      "TestSet - Accuracy: 0.9233\n",
      "TestSet - F1 score: 0.8670\n",
      "TestSet - Precision: 0.8544\n",
      "TestSet - Recall: 0.8800\n",
      "TestSet - Roc Auc Score: 0.9103\n",
      "===================================\n",
      "\n",
      "\n",
      "Model : AdaBoost Classifier\n",
      "Performance of the Model\n",
      "TrainSet - Accuracy: 0.9526\n",
      "TrainSet - F1 score: 0.9533\n",
      "TrainSet - Precision: 0.9406\n",
      "TrainSet - Recall: 0.9662\n",
      "TrainSet - Roc Auc Score: 0.9526\n",
      "----------------------------------\n",
      "Performance of the Model\n",
      "TestSet - Accuracy: 0.9184\n",
      "TestSet - F1 score: 0.8639\n",
      "TestSet - Precision: 0.8202\n",
      "TestSet - Recall: 0.9125\n",
      "TestSet - Roc Auc Score: 0.9166\n",
      "===================================\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "base_report =evaluate_models(X=X, y=y, models=models)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "211d2c53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model Name</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>F1 Score</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "      <th>ROC AUC Score</th>\n",
       "      <th>Execution Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>XGBClassifier</td>\n",
       "      <td>0.923350</td>\n",
       "      <td>0.866995</td>\n",
       "      <td>0.854369</td>\n",
       "      <td>0.8800</td>\n",
       "      <td>0.910268</td>\n",
       "      <td>0.902681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AdaBoost Classifier</td>\n",
       "      <td>0.918382</td>\n",
       "      <td>0.863905</td>\n",
       "      <td>0.820225</td>\n",
       "      <td>0.9125</td>\n",
       "      <td>0.916607</td>\n",
       "      <td>1.290313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CatBoosting Classifier</td>\n",
       "      <td>0.914123</td>\n",
       "      <td>0.855090</td>\n",
       "      <td>0.820690</td>\n",
       "      <td>0.8925</td>\n",
       "      <td>0.907598</td>\n",
       "      <td>20.613153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gradient Boosting</td>\n",
       "      <td>0.913414</td>\n",
       "      <td>0.856471</td>\n",
       "      <td>0.808889</td>\n",
       "      <td>0.9100</td>\n",
       "      <td>0.912384</td>\n",
       "      <td>5.570227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.907736</td>\n",
       "      <td>0.840295</td>\n",
       "      <td>0.826087</td>\n",
       "      <td>0.8550</td>\n",
       "      <td>0.891821</td>\n",
       "      <td>0.363111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>0.907026</td>\n",
       "      <td>0.847141</td>\n",
       "      <td>0.794311</td>\n",
       "      <td>0.9075</td>\n",
       "      <td>0.907169</td>\n",
       "      <td>0.215876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.900639</td>\n",
       "      <td>0.820051</td>\n",
       "      <td>0.843915</td>\n",
       "      <td>0.7975</td>\n",
       "      <td>0.869513</td>\n",
       "      <td>11.266588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>K-Neighbors Classifier</td>\n",
       "      <td>0.832505</td>\n",
       "      <td>0.760163</td>\n",
       "      <td>0.640411</td>\n",
       "      <td>0.9350</td>\n",
       "      <td>0.863437</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Model Name  Accuracy  F1 Score  Precision  Recall  \\\n",
       "0           XGBClassifier  0.923350  0.866995   0.854369  0.8800   \n",
       "1     AdaBoost Classifier  0.918382  0.863905   0.820225  0.9125   \n",
       "2  CatBoosting Classifier  0.914123  0.855090   0.820690  0.8925   \n",
       "3       Gradient Boosting  0.913414  0.856471   0.808889  0.9100   \n",
       "4           Decision Tree  0.907736  0.840295   0.826087  0.8550   \n",
       "5     Logistic Regression  0.907026  0.847141   0.794311  0.9075   \n",
       "6           Random Forest  0.900639  0.820051   0.843915  0.7975   \n",
       "7  K-Neighbors Classifier  0.832505  0.760163   0.640411  0.9350   \n",
       "\n",
       "   ROC AUC Score  Execution Time  \n",
       "0       0.910268        0.902681  \n",
       "1       0.916607        1.290313  \n",
       "2       0.907598       20.613153  \n",
       "3       0.912384        5.570227  \n",
       "4       0.891821        0.363111  \n",
       "5       0.907169        0.215876  \n",
       "6       0.869513       11.266588  \n",
       "7       0.863437        0.000000  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "base_report"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "496c9cff",
   "metadata": {},
   "source": [
    "From this report, We analyzed several ML models to predict customer Attrition for a telecom company. The dataset used in this study was imbalanced, with the minority class representing the customers who churn and the majority class representing customers who do not churn.\n",
    "\n",
    "We evaluated the performance of the following models: CatBoosting Classifier, Gradient Boosting, XGBClassifier, AdaBoost Classifier, Logistic Regression, Random Forest, Decision Tree as well as K-Neighbors Classifier. Here, We utilized accuracy, F1 score, precision, recall, ROC AUC score, and execution time as evaluation metrics.\n",
    "\n",
    "Based on the evaluation, we recommend using the `CatBoosting Classifier` or `Gradient Boosting` models as they performed the best across all evaluation metrics. However, it is important to note that these models had relatively longer execution times compared to other models. This may impact the hyperparameter tuning process and should be considered when selecting a model for practical deployment.\n",
    "\n",
    "Since the execution time of the CatBoosting Classifier is much higher than that of the Gradient Boosting model (6 seconds vs 2 seconds), the Gradient Boosting model might be a better choice if we consider the execution time factor and AUC score.\n",
    "\n",
    "Future experiment can focus on further improving the performance of the models by hyperparameter tuning with 3 best models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "911e1b41",
   "metadata": {},
   "source": [
    "**Here we can use Gradient Boosting , XGBClassifier, AdaBoost Classifier for Hyper Parameter Tuning**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ebc68546",
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid_gbc = {\n",
    "    \"n_estimators\":[5,50,100,150,200,250],\n",
    "    \"max_depth\":[1,3,5,7,9,10,12],\n",
    "    \"learning_rate\":[(0.96 + x / 100) for x in range(0, 6)]\n",
    "}\n",
    "\n",
    "param_grid_xgb = {\n",
    "    \"learning_rate\": [0.1, 0.01],\n",
    "    \"max_depth\": [5, 8, 12, 20, 30, 40],\n",
    "    \"n_estimators\": [150, 250, 350],\n",
    "    \"colsample_bylevel\": [0.5, 0.8, 1, 0.3, 0.4]\n",
    "}\n",
    "\n",
    "param_grid_abc = {\n",
    "    'n_estimators': [2, 3, 4, 5, 6, 7, 8, 9, 10],\n",
    "    'learning_rate': [(0.96 + x / 100) for x in range(0, 7)],\n",
    "    'algorithm': ['SAMME', 'SAMME.R']\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e853ebff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Models list for Hyperparameter tuning\n",
    "randomcv_models = [\n",
    "    ('XGBClassifier', XGBClassifier(), param_grid_xgb),\n",
    "    ('Gradient Boosting', GradientBoostingClassifier(), param_grid_gbc),\n",
    "    (\"AdaBoost Classifier\", AdaBoostClassifier(), param_grid_abc),\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3d77371",
   "metadata": {},
   "source": [
    "Its Commonly Recommendable to balance the dataset before \"Hyper parameter Tuning\" because hyper parameter tuning is used to optimize the performance of the given ML algorithm on a selected dataset. However, if the dataset is imbalanced, the performance metrics like Accuracy, Precision and Recall can be misleading. Therefore , its good to handle the imbalanced dataset before tuning the hyperparameters to make sure that the model performance is optimized on a balanced dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a4afdb48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 2 folds for each of 120 candidates, totalling 240 fits\n",
      "Fitting 2 folds for each of 120 candidates, totalling 240 fits\n",
      "Fitting 2 folds for each of 120 candidates, totalling 240 fits\n",
      "---------------- Best Parameters for the XGBClassifier is -------------------\n",
      "{'n_estimators': 350, 'max_depth': 8, 'learning_rate': 0.01, 'colsample_bylevel': 0.3}\n",
      "---------------- Best Parameters for the Gradient Boosting is -------------------\n",
      "{'n_estimators': 100, 'max_depth': 12, 'learning_rate': 1.0}\n",
      "---------------- Best Parameters for the AdaBoost Classifier is -------------------\n",
      "{'n_estimators': 7, 'learning_rate': 0.98, 'algorithm': 'SAMME.R'}\n"
     ]
    }
   ],
   "source": [
    "from imblearn.combine import SMOTETomek\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "# Define the samplers\n",
    "smt = SMOTETomek()\n",
    "\n",
    "X_res, y_res = smt.fit_resample(X, y)\n",
    "\n",
    "randomcv_param = {}\n",
    "for modelname, modelobj, parameters in randomcv_models:\n",
    "    random = RandomizedSearchCV(estimator=modelobj,\n",
    "                                param_distributions=parameters,\n",
    "                                n_iter=120,\n",
    "                                cv=2,\n",
    "                                verbose=2,\n",
    "                                n_jobs=-1)\n",
    "    random.fit(X_res, y_res)\n",
    "    randomcv_param[modelname] = random.best_params_\n",
    "\n",
    "for model_name in randomcv_param:\n",
    "    print(f\"---------------- Best Parameters for the {model_name} is -------------------\")\n",
    "    print(randomcv_param[model_name])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "547955a6",
   "metadata": {},
   "source": [
    "### Retraining the Model with Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e950f438",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model : XGBClassifier\n",
      "Performance of the Model\n",
      "TrainSet - Accuracy: 0.9619\n",
      "TrainSet - F1 score: 0.9624\n",
      "TrainSet - Precision: 0.9489\n",
      "TrainSet - Recall: 0.9764\n",
      "TrainSet - Roc Auc Score: 0.9619\n",
      "----------------------------------\n",
      "Performance of the Model\n",
      "TestSet - Accuracy: 0.9198\n",
      "TestSet - F1 score: 0.8656\n",
      "TestSet - Precision: 0.8254\n",
      "TestSet - Recall: 0.9100\n",
      "TestSet - Roc Auc Score: 0.9168\n",
      "===================================\n",
      "\n",
      "\n",
      "Model : AdaBoost Classifier\n",
      "Performance of the Model\n",
      "TrainSet - Accuracy: 0.9325\n",
      "TrainSet - F1 score: 0.9338\n",
      "TrainSet - Precision: 0.9162\n",
      "TrainSet - Recall: 0.9520\n",
      "TrainSet - Roc Auc Score: 0.9325\n",
      "----------------------------------\n",
      "Performance of the Model\n",
      "TestSet - Accuracy: 0.9141\n",
      "TestSet - F1 score: 0.8620\n",
      "TestSet - Precision: 0.7925\n",
      "TestSet - Recall: 0.9450\n",
      "TestSet - Roc Auc Score: 0.9234\n",
      "===================================\n",
      "\n",
      "\n",
      "Model : Gradient Boosting\n",
      "Performance of the Model\n",
      "TrainSet - Accuracy: 1.0000\n",
      "TrainSet - F1 score: 1.0000\n",
      "TrainSet - Precision: 1.0000\n",
      "TrainSet - Recall: 1.0000\n",
      "TrainSet - Roc Auc Score: 1.0000\n",
      "----------------------------------\n",
      "Performance of the Model\n",
      "TestSet - Accuracy: 0.9198\n",
      "TestSet - F1 score: 0.8613\n",
      "TestSet - Precision: 0.8458\n",
      "TestSet - Recall: 0.8775\n",
      "TestSet - Roc Auc Score: 0.9070\n",
      "===================================\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "best_models = {\n",
    "    \"XGBClassifier\": XGBClassifier(**randomcv_param['XGBClassifier'],n_jobs=-1),\n",
    "    \"AdaBoost Classifier\" : AdaBoostClassifier(**randomcv_param['AdaBoost Classifier']),\n",
    "    \"Gradient Boosting\" : GradientBoostingClassifier(**randomcv_param['Gradient Boosting'])\n",
    "}\n",
    "tuned_report =evaluate_models(X=X, y=y, models=best_models)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "acd7ab71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model Name</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>F1 Score</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "      <th>ROC AUC Score</th>\n",
       "      <th>Execution Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>XGBClassifier</td>\n",
       "      <td>0.919801</td>\n",
       "      <td>0.865636</td>\n",
       "      <td>0.825397</td>\n",
       "      <td>0.9100</td>\n",
       "      <td>0.916843</td>\n",
       "      <td>2.662732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Gradient Boosting</td>\n",
       "      <td>0.919801</td>\n",
       "      <td>0.861350</td>\n",
       "      <td>0.845783</td>\n",
       "      <td>0.8775</td>\n",
       "      <td>0.907035</td>\n",
       "      <td>13.074371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AdaBoost Classifier</td>\n",
       "      <td>0.914123</td>\n",
       "      <td>0.862030</td>\n",
       "      <td>0.792453</td>\n",
       "      <td>0.9450</td>\n",
       "      <td>0.923442</td>\n",
       "      <td>0.141555</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Model Name  Accuracy  F1 Score  Precision  Recall  ROC AUC Score  \\\n",
       "0        XGBClassifier  0.919801  0.865636   0.825397  0.9100       0.916843   \n",
       "1    Gradient Boosting  0.919801  0.861350   0.845783  0.8775       0.907035   \n",
       "2  AdaBoost Classifier  0.914123  0.862030   0.792453  0.9450       0.923442   \n",
       "\n",
       "   Execution Time  \n",
       "0        2.662732  \n",
       "1       13.074371  \n",
       "2        0.141555  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tuned_report"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f7cade5",
   "metadata": {},
   "source": [
    "These 3 models such as Gradient Boosting, XGBClassifier and AdaBoost Classifier were trained and evaluated on the selected dataset. All these 3 models were trained with the Tuned Hyperparameter."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb9913d1",
   "metadata": {},
   "source": [
    "Based on the results, all three models have similar performance, with accuracy and F1 scores ranging from 0.909 to 0.920. However, when dealing with an imbalanced dataset, we need to pay special attention to the recall metric, which measures the ability of the model to correctly identify positive cases (in this case, customers who churn). Therefore, we should prioritize the model with the highest recall score.\n",
    "\n",
    "However, it's very essential to note, the choice of model should not be based on a single metric, but rather on a combination of metrics and other factors such as interpretability, execution time, and computational resources required. In this case, all three models have similar execution times, and the XGBClassifier has the highest score of 0.92, which indicates good overall performance in terms of ranking the positive and negative classes.\n",
    "\n",
    "XGBClassifier is an implementation of the gradient boosting algorithm with an efficient tree-based implementation. It's a supervised learning algorithm which is used for both regression & classification problems. The algorithm works based on by building an ensemble of weak decision tree models and improving those performance by adjusting the weights of misclassified observations in each iteration.\n",
    "\n",
    "Conclusion:\n",
    "In conclusion, the XGBClassifier is the best model for predicting customer churn in this imbalanced dataset, based on the recall metric, ROC AUC Score, and overall performance."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "081f907a",
   "metadata": {},
   "source": [
    "## With Imbalanced dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e69086cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_1 = dataset.drop(['Churn Value'], axis=1)\n",
    "y_1 = dataset['Churn Value']\n",
    "\n",
    "X_1 = preprocessor.fit_transform(X_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ed9c24cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "X1_trains, X1_tests, y1_trains, y1_tests = train_test_split(X_1, y_1, test_size=0.2, random_state=36)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "809ae281",
   "metadata": {},
   "outputs": [],
   "source": [
    "# class weights to account for imbalance\n",
    "class_weights = len(y1_trains) / (2 * pd.Series(y1_trains).value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "cee093fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n",
       "              predictor=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n",
       "              predictor=None, random_state=None, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n",
       "              predictor=None, random_state=None, ...)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train an XGBoost model with class weights\n",
    "model = XGBClassifier(scale_pos_weight=class_weights[1])\n",
    "model.fit(X1_trains, y1_trains)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "5665cff8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the original feature names\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "numeric_feature_names = list(dataset[num_feature].columns)\n",
    "categorical_feature_names = list(preprocessor.named_transformers_['Categorical_Pipeline'].get_feature_names_out(categorical_feature))\n",
    "#categorical_feature_names = list(preprocessor.named_transformers_['Categorical_Pipeline'].named_steps['one_hot_encoder'].get_feature_names_out(input_features=categorical_feature))\n",
    "\n",
    "transform_feature_names = ['_'.join([f, 'transformed']) for f in transform_features]\n",
    "feature_names = numeric_feature_names + categorical_feature_names + transform_feature_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "50acff5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature Importance Scores:\n",
      "Contract_Month-to-month : 51.85902404785156\n",
      "Churn Score : 38.34318923950195\n",
      "Dependents_No : 8.17722225189209\n",
      "Internet Service_Fiber optic : 8.152310371398926\n",
      "Online Security_No : 4.0171356201171875\n",
      "City_Running Springs : 3.5099925994873047\n",
      "Internet Service_DSL : 3.44549298286438\n",
      "Streaming Movies_Yes : 3.0825510025024414\n",
      "Internet Service_No : 3.052438497543335\n",
      "Contract_One year : 2.9162003993988037\n",
      "Online Backup_No : 2.760613441467285\n",
      "City_Bakersfield : 2.6751062870025635\n",
      "Payment Method_Electronic check : 2.5471854209899902\n",
      "Paperless Billing_No : 2.4795477390289307\n",
      "Contract_Two year : 2.392561197280884\n",
      "Tenure Months : 2.311992645263672\n",
      "City_San Jose : 2.244800090789795\n",
      "City_Santa Rosa : 2.2219886779785156\n",
      "Device Protection_Yes : 2.216334819793701\n",
      "Streaming TV_Yes : 2.087562084197998\n",
      "City_San Dimas : 2.0003838539123535\n",
      "City_Santa Ana : 1.9791754484176636\n",
      "City_San Francisco : 1.7374250888824463\n",
      "City_Los Angeles : 1.7263695001602173\n",
      "Tech Support_No : 1.7182656526565552\n",
      "Multiple Lines_No : 1.6847913265228271\n",
      "City_Elk Grove : 1.6525471210479736\n",
      "Senior Citizen_No : 1.6392630338668823\n",
      "Total Charges_transformed : 1.611040472984314\n",
      "Online Backup_Yes : 1.5796056985855103\n",
      "City_Fresno : 1.511548399925232\n",
      "City_Brea : 1.4681085348129272\n",
      "Tech Support_Yes : 1.4572086334228516\n",
      "Multiple Lines_No phone service : 1.4341297149658203\n",
      "Partner_No : 1.4095302820205688\n",
      "Payment Method_Credit card (automatic) : 1.3560692071914673\n",
      "Streaming Movies_No : 1.337954044342041\n",
      "Online Security_Yes : 1.250910997390747\n",
      "Device Protection_No : 1.2299853563308716\n",
      "Multiple Lines_Yes : 1.2244288921356201\n",
      "City_Sacramento : 1.1712853908538818\n",
      "Payment Method_Bank transfer (automatic) : 1.1553919315338135\n",
      "City_Walnut Creek : 1.1012881994247437\n",
      "City_Hayward : 1.0452685356140137\n",
      "City_Santa Barbara : 0.9947755336761475\n",
      "City_Modesto : 0.9246544241905212\n",
      "City_Pasadena : 0.9182264804840088\n",
      "Payment Method_Mailed check : 0.907774031162262\n",
      "City_Inglewood : 0.9072531461715698\n",
      "Streaming TV_No : 0.8799498677253723\n",
      "City_Glendale : 0.8703967928886414\n",
      "City_Lakewood : 0.6543239951133728\n",
      "City_Stockton : 0.6409362554550171\n",
      "City_Anaheim : 0.5440173745155334\n",
      "City_Concord : 0.43693965673446655\n",
      "City_San Diego : 0.41355445981025696\n",
      "City_Oakland : 0.3499912619590759\n",
      "City_Chula Vista : 0.2644942104816437\n",
      "City_San Bernardino : 0.18940097093582153\n",
      "\n",
      "Most Influential Feature for the Predicted Output: Contract_Month-to-month\n"
     ]
    }
   ],
   "source": [
    "y_pred = model.predict(X_1[0])\n",
    "\n",
    "# Obtain the feature importance scores\n",
    "feature_importance = model.get_booster().get_score(importance_type='gain')\n",
    "feature_importance = {feature_names[int(k[1:])]: v for k, v in feature_importance.items()}\n",
    "\n",
    "# Sort the feature importance scores in descending order\n",
    "sorted_feature_importance = sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)\n",
    "\n",
    "# Print feature importance scores in descending order\n",
    "print(\"Feature Importance Scores:\")\n",
    "for feature, score in sorted_feature_importance:\n",
    "    print(feature, \":\", score)\n",
    "\n",
    "# Print the feature that influenced the most for the predicted output\n",
    "most_influential_feature = sorted_feature_importance[0][0]\n",
    "print(\"\\nMost Influential Feature for the Predicted Output:\", most_influential_feature)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3c70577",
   "metadata": {},
   "source": [
    "## Checking accuracy and Roc of imbalanced data model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a53cbcb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "y1_test_pred = model.predict(X1_tests)\n",
    "\n",
    "# Training the set performances\n",
    "train_accuracys, trains_f1, train_precisions, train_recalls, train_rocaucs = evaluate_clf(y1_tests, y1_test_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "aa59b5fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9198012775017743"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_accuracys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "abf55a15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9053715693879382"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_rocaucs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8297f280",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output = model.predict(X1_tests[6])\n",
    "output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "932eb350",
   "metadata": {},
   "source": [
    "## SHAP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "663b22eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x468 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import shap\n",
    "\n",
    "# Create an explainer object for your XGBoost model\n",
    "explainer = shap.Explainer(model, feature_names=feature_names)\n",
    "\n",
    "# Calculate 'SHAP values' for a subset of your test data\n",
    "shap_values = explainer(X1_tests[6])\n",
    "\n",
    "# Plot the SHAP values for a single instance\n",
    "shap.plots.waterfall(shap_values[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a3281868",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column: City\n",
      "Unique values: ['Los Angeles' 'Beverly Hills' 'Huntington Park' ... 'Standish' 'Tulelake'\n",
      " 'Olympic Valley']\n",
      "Column: Senior Citizen\n",
      "Unique values: ['No' 'Yes']\n",
      "Column: Partner\n",
      "Unique values: ['No' 'Yes']\n",
      "Column: Dependents\n",
      "Unique values: ['No' 'Yes']\n",
      "Column: Multiple Lines\n",
      "Unique values: ['No' 'Yes' 'No phone service']\n",
      "Column: Internet Service\n",
      "Unique values: ['DSL' 'Fiber optic' 'No']\n",
      "Column: Online Security\n",
      "Unique values: ['Yes' 'No' 'No internet service']\n",
      "Column: Online Backup\n",
      "Unique values: ['Yes' 'No' 'No internet service']\n",
      "Column: Device Protection\n",
      "Unique values: ['No' 'Yes' 'No internet service']\n",
      "Column: Tech Support\n",
      "Unique values: ['No' 'Yes' 'No internet service']\n",
      "Column: Streaming TV\n",
      "Unique values: ['No' 'Yes' 'No internet service']\n",
      "Column: Streaming Movies\n",
      "Unique values: ['No' 'Yes' 'No internet service']\n",
      "Column: Contract\n",
      "Unique values: ['Month-to-month' 'Two year' 'One year']\n",
      "Column: Paperless Billing\n",
      "Unique values: ['Yes' 'No']\n",
      "Column: Payment Method\n",
      "Unique values: ['Mailed check' 'Electronic check' 'Bank transfer (automatic)'\n",
      " 'Credit card (automatic)']\n"
     ]
    }
   ],
   "source": [
    "categorical_colus = dataset.select_dtypes(include=['object']).columns.tolist()\n",
    "\n",
    "for colu in categorical_colus:\n",
    "    print(f\"Column: {colu}\")\n",
    "    print(f\"Unique values: {dataset[colu].unique()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "5613ad01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                min     max\n",
      "Tenure Months   0.0    72.0\n",
      "Total Charges  18.8  8684.8\n",
      "Churn Value     0.0     1.0\n",
      "Churn Score     5.0   100.0\n"
     ]
    }
   ],
   "source": [
    "num_columns = dataset.select_dtypes(include='number').columns.tolist()\n",
    "num_stats = dataset[num_columns].describe().loc[['min', 'max']].transpose()\n",
    "print(num_stats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "d5b46b0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "city_counts = dataset['City'].value_counts().sort_values(ascending=False)\n",
    "city_list = city_counts.index.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "6c0b2a4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import shap\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "class XGBoostModel:\n",
    "    def __init__(self, model=model, preprocessor=preprocessor, feature_names=feature_names, city=city_list):\n",
    "        self.model = model\n",
    "        self.preprocessor = preprocessor\n",
    "        self.feature_names = feature_names\n",
    "        self.city_list = city\n",
    "    \n",
    "    def predict(self, input_dict):\n",
    "        # Convert input dictionary to dataframe\n",
    "        input_df = pd.DataFrame.from_dict(input_dict, orient='index').transpose()\n",
    "        \n",
    "        # Preprocess input dataframe using preprocessor\n",
    "        X = self.preprocessor.transform(input_df)\n",
    "        \n",
    "        # Make prediction using XGBoost model\n",
    "        y_pred = self.model.predict(X)[0]\n",
    "        \n",
    "        # Compute SHAP values for input data\n",
    "        explainer = shap.Explainer(self.model, feature_names=self.feature_names)\n",
    "        shap_values = explainer(X)\n",
    "        \n",
    "        feedback = \"No feedback\"\n",
    "        if y_pred == 1:\n",
    "            # Sort the 'SHAP values' by descending order\n",
    "            sorted_index = np.argsort(shap_values.values[0])[::-1]\n",
    "\n",
    "            # Extract the names of the top 2 features with highest SHAP values\n",
    "            top_2_features =  np.take(feature_names, sorted_index)[:2]\n",
    "\n",
    "            # Generate feedback based on the negative features\n",
    "            if len(top_2_features) == 0:\n",
    "                feedback = \"Based on the provided information, we do not see any major issues that would result in a high likelihood of churn.\"\n",
    "            else:\n",
    "                feedback = f\"Based on the provided information, the following are top 2 factors may increase the likelihood of a churn: {', '.join(top_2_features)}. Please consider addressing these issues to improve customer retention.\"\n",
    "            \n",
    "        return y_pred, shap_values, feedback"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b811917a",
   "metadata": {},
   "source": [
    "### Testing SHAP Calculation using Sample Input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "c3a60a9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_dict = {\n",
    "'City': 'Los Angeles',\n",
    "'Senior Citizen': 'No',\n",
    "'Partner': 'No',\n",
    "'Dependents': 'No',\n",
    "'Tenure Months': 2,\n",
    "'Multiple Lines': 'No',\n",
    "'Internet Service': 'DSL',\n",
    "'Online Security': 'Yes',\n",
    "'Online Backup': 'Yes',\n",
    "'Device Protection': 'No',\n",
    "'Tech Support': 'No',\n",
    "'Streaming TV': 'No',\n",
    "'Streaming Movies': 'No',\n",
    "'Contract': 'Month-to-month',\n",
    "'Paperless Billing': 'Yes',\n",
    "'Payment Method': 'Mailed check',\n",
    "'Total Charges': 108.15,\n",
    "'Churn Score': 86\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "c44851f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_model = XGBoostModel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "026d804c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Prediction: 1 \n",
      " Feedback: Based on the provided information, the following are top 2 factors may increase the likelihood of a churn: Churn Score, Tenure Months. Please consider addressing these issues to improve customer retention.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x468 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Make prediction and generate SHAP waterfall plot\n",
    "y_pred, shap_plot,feedback = final_model.predict(input_dict)\n",
    "\n",
    "# Show prediction and SHAP waterfall plot\n",
    "print(\" Prediction:\", y_pred, \"\\n\", \"Feedback:\", feedback)\n",
    "shap.plots.waterfall(shap_plot[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "5e38599f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the instance to a file using pickle\n",
    "import pickle\n",
    "import os\n",
    "def save_object(file: object, filename: str):\n",
    "    os.makedirs('artifacts', exist_ok=True)\n",
    "    with open(f'artifacts/{filename}.pkl', 'wb') as f:\n",
    "        pickle.dump(file, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "68296895",
   "metadata": {},
   "outputs": [],
   "source": [
    "save_object(file=city_list, filename='city_list')\n",
    "save_object(file=model, filename='xgb_model')\n",
    "save_object(file=preprocessor, filename='preprocessor')\n",
    "save_object(file=feature_names, filename='feature_names')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04a20a71",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
